# -*- coding: utf-8 -*-

import sys
import os
path = os.path.dirname(__file__)
root = os.path.abspath(os.path.join(path,'../..'))
sys.path.append(root)

import re
import codecs
from annotation.annotation import Annotation

class MiRNARecognizer:
    pattern = re.compile(
        r'(^|\s|[^a-zA-Z])'
        r'(([a-zA-Z]+-)?'
        r'(let|lin|micorR|miR|miRNA|microRNA)'
        r'(-| |x)?[0-9]+[a-zA-Z*]?'
        r'([\-+][b0-9][^\s,]*)?'
        r'((,| and| or) -?[0-9]+[a-c]*)*)',
        re.IGNORECASE)

    def __init__(self):
        pass
        
    def recognize(self, inputDir, inputSux, docList):
        res = {}
        for doc in docList:
            inFile = os.path.join(inputDir, doc+inputSux)

            if not os.path.isfile(inFile):
                print >> sys.stderr, 'file not found: ' + inFile
                continue
    
            f = codecs.open(inFile,'r','utf-8')
            text = f.read()
            f.close()

            annotation = Annotation()
            annotation.text = text
            matches = self.pattern.finditer(text)
            for m in matches:
                annotation.add_entity('MiRNA', m.start(2), m.end(2), m.group(2))
                
            res[doc] = annotation

        return res

    
